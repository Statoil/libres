name: Libres testing

on: [push, pull_request]

jobs:
  build-test-cmake:
    name: CMake

    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest', 'macos-latest']

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2

    - name: Install Ubuntu dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update -y
        sudo apt-get install -y valgrind

    - name: Build libecl
      run: |
        git clone https://github.com/equinor/libecl
        mkdir libecl/build
        cmake -S libecl -B libecl/build
        sudo cmake --build libecl/build --target install
        sudo rm -rf libecl

    - name: Build libres
      run: |
        mkdir cmake-build
        cmake -S . -B cmake-build             \
            -DBUILD_TESTS=ON                  \
            -DRES_VERSION=1.2.3               \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo
        cmake --build cmake-build

    - name: Run tests
      run: |
        cd cmake-build
        export PATH=$PWD/bin:$PATH
        ctest --output-on-failure


  build-test-wheel:
    name: Python

    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest', 'macos-latest']
        python: ['3.6', '3.7', '3.8']

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2

    - name: Build Linux Wheel
      uses: docker://quay.io/pypa/manylinux2010_x86_64
      with:
        entrypoint: /github/workspace/ci/github/build_linux_wheel.sh
        args: ${{ matrix.python }}
      if: matrix.os == 'ubuntu-latest'

    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python }}

    - name: Build macOS Wheel
      run: pip wheel . --no-deps -w dist
      if: matrix.os == 'macos-latest'

    - name: Upload wheel as artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.os }} Python ${{ matrix.python }} wheel
        path: dist/*

    - name: Install libres
      run: pip install dist/*

    - name: Run Python tests
      run: |
        # Env vars
        export ECL_SKIP_SIGNAL=1
        export ERT_SHOW_BACKTRACE=1

        # Run tests
        pip install -r test_requirements.txt
        pytest


  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build-test-wheel]

    # If this is a tagged release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')

    steps:
      - name: Get wheels
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Move to dist/
        run: |
          mkdir dist
          find artifacts -name "*.whl" -exec mv '{}' dist/ \;

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@v1.3.1
        with:
          user: statoil-travis
          password: ${{ secrets.pypi_password }}
